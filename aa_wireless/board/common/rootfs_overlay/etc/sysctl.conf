# fq_codel is robust without fixed bandwidth settings; ideal for Wi-Fi APs.
net.core.default_qdisc = fq_codel

# --- Optional: If you explicitly switch to BBR congestion control (see below),
# BBR benefits from sch_fq pacing. Uncomment this instead of fq_codel:
# net.core.default_qdisc = fq

# Per-socket send/recv buffers: min, default, max (bytes)
net.ipv4.tcp_wmem = 4096 65536 9437184        # up to ~9 MB send
net.ipv4.tcp_rmem = 4096 131072 16777216      # up to 16 MB receive

# System-wide TCP memory thresholds (pages, typically 4 KiB)
# ~16 MiB low, ~32 MiB pressure, ~64 MiB high
net.ipv4.tcp_mem = 4096 8192 16384

# Global caps aligning with the per-socket limits above
net.core.wmem_default = 65536
net.core.wmem_max     = 9437184
net.core.rmem_default = 131072
net.core.rmem_max     = 16777216

# Prefer lower latency heuristics
net.ipv4.tcp_low_latency = 1

# Don’t re-enter slow start after idle pauses (reduces lag on resume)
net.ipv4.tcp_slow_start_after_idle = 0

# Limit unsent data in the stack to curb bursts and click/UX latency
net.ipv4.tcp_limit_output_bytes = 131072

# Default “not-sent low water mark” (bytes): keep app from queuing huge tails
# 16–64 KiB is a good low-latency starting point; 0 disables the feature.
net.ipv4.tcp_notsent_lowat = 16384

# Disable automatic corking (don’t batch small writes)
net.ipv4.tcp_autocorking = 0

# Timestamps off: tiny CPU win; fine on LAN/Wi-Fi
net.ipv4.tcp_timestamps = 0

# SACK on: better loss recovery over Wi-Fi
net.ipv4.tcp_sack = 1

# Window scaling on (needed for larger windows)
net.ipv4.tcp_window_scaling = 1

# Don’t save old path metrics (avoid stale RTT/bw after roaming)
net.ipv4.tcp_no_metrics_save = 1

# TCP Fast Open (client+server) for faster handshakes if peer supports it
net.ipv4.tcp_fastopen = 3

# Congestion control: CUBIC is stable and low-overhead.
net.ipv4.tcp_congestion_control = cubic

# --- Optional: Prefer BBR for even lower queueing delay if available:
# (If you enable this, consider switching qdisc to 'fq' above)
# net.ipv4.tcp_congestion_control = bbr

# F-RTO: avoid needless backoff on spurious retransmits (wireless friendly)
net.ipv4.tcp_frto = 2

# Shorter min-RTT window so latency spikes get noticed sooner
net.ipv4.tcp_min_rtt_wlen = 20

# SACK compression timing (fine-tuning; keep unless problems observed)
net.ipv4.tcp_comp_sack_delay_ns = 500000
net.ipv4.tcp_comp_sack_slack_ns = 50000

# Large ingress backlog to resist CPU hiccups (harmless for single client)
net.core.netdev_max_backlog = 65536

# Close half-open/FIN-wait sockets sooner
net.ipv4.tcp_fin_timeout = 15


########################################
# Removed/obsolete (do not set)
########################################
# net.ipv4.tcp_adv_win_scale is obsolete in 6.6+
# net.ipv4.tcp_tw_reuse is ignored on modern kernels
